# Viscosity Prediction
import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
import ipywidgets as widgets

# Constants for the enolase reaction
Vmax_enolase = 65.36 / 60  # converting mM/min to mM/s
Km_enolase = 1.52  # mM
ECF_impermeable_solute_concentration = 306  # milliosmoles/L
initial_cell_volume = 87e-15  # L
osmoles_ICF_impermeable_solute = ECF_impermeable_solute_concentration * initial_cell_volume / 1e3
initial_ECF_water_concentration = 55.5e3 * 0.93  # M

# Constants for blood viscosity
baseline_viscosity = 1.3  # cP (centipoise)
viscosity_sensitivity = 0.5  # Sensitivity coefficient
stroke_threshold_ischemic = 24.2 + 4.9  # Upper bound of the range for ischemic stroke

# Glycolysis system definition
def glycolysis_system(t, y, Vmax_enolase, Km_enolase, initial_cell_volume, cell_water_molarity_to_volume_conversion):
    _2PG, PEP, cell_water, cell_volume = y
    forward_reaction_rate = Vmax_enolase * _2PG / (Km_enolase + _2PG)
    backward_reaction_rate = Vmax_enolase * PEP / (Km_enolase + PEP)
    net_reaction_rate = forward_reaction_rate - backward_reaction_rate
    d2PG_dt = -net_reaction_rate
    dPEP_dt = net_reaction_rate
    dCellWater_dt = net_reaction_rate
    dCellVolume_dt = dCellWater_dt * cell_water_molarity_to_volume_conversion
    return [d2PG_dt, dPEP_dt, dCellWater_dt, dCellVolume_dt]

# Calculate blood viscosity
def calculate_blood_viscosity(initial_plasma_volume, current_plasma_volume):
    volume_change = (current_plasma_volume - initial_plasma_volume) / initial_plasma_volume
    viscosity_change = volume_change * viscosity_sensitivity
    current_viscosity = baseline_viscosity + (baseline_viscosity * viscosity_change)
    return current_viscosity

def run_simulation(initial_2PG, initial_PEP, initial_cell_water):
    cell_water_molarity_to_volume_conversion = initial_cell_volume / initial_cell_water
    initial_conditions = [initial_2PG, initial_PEP, initial_cell_water, initial_cell_volume]
    t_span = (0, 86400)  # seconds
    t_eval = np.linspace(*t_span, 86400)
    solution = solve_ivp(glycolysis_system, t_span, initial_conditions,
                         args=(Vmax_enolase, Km_enolase, initial_cell_volume, cell_water_molarity_to_volume_conversion),
                         t_eval=t_eval)
    plot_results(solution, initial_cell_water, solution.y[2])

def plot_results(solution, initial_plasma_volume, plasma_volumes):
    # Calculate viscosity and determine risk
    final_plasma_volume = plasma_volumes[-1]
    estimated_blood_viscosity = calculate_blood_viscosity(initial_plasma_volume, final_plasma_volume)
    risk_message = "No immediate concern for stroke based on blood viscosity."
    if estimated_blood_viscosity > stroke_threshold_ischemic:
        risk_message = "Warning: High blood viscosity. Increased risk of stroke."

    # Create figure with subplots for the data visualization
    fig, axs = plt.subplots(2, 2, figsize=(12, 10))
    titles = ['2-PG Concentration over Time', 'PEP Concentration over Time',
              'Cell Water Concentration over Time', 'Cell Volume over Time']
    labels = ['2-PG (mM)', 'PEP (mM)', 'Cell Water (mM)', 'Cell Volume (L)']

    for i, ax in enumerate(axs.flat):
        ax.plot(solution.t, solution.y[i], label=labels[i])
        ax.set_title(titles[i])
        ax.set_xlabel('Time (s)')
        ax.set_ylabel(labels[i])

    plt.tight_layout(pad=3.0)
    plt.show()

    # Create a separate figure for displaying the text
    fig2 = plt.figure(figsize=(6, 2))
    plt.axis('off')
    plt.text(0.5, 0.5, f"Estimated Blood Viscosity: {estimated_blood_viscosity:.3f} cP\n{risk_message}",
             horizontalalignment='center', verticalalignment='center', fontsize=12, color='red',
             bbox={'facecolor': 'white', 'alpha': 0.5, 'pad': 10})
    plt.show()

# Widgets for input parameters
initial_2PG_widget = widgets.FloatSlider(value=500, min=0, max=10000, step=10, description='Initial 2-PG:')
initial_PEP_widget = widgets.FloatSlider(value=0, min=0, max=10000, step=10, description='Initial PEP:')
initial_cell_water_widget = widgets.FloatSlider(value=initial_ECF_water_concentration, min=0, max=55500, step=10, description='Initial Cell Water:')

ui = widgets.VBox([initial_2PG_widget, initial_PEP_widget, initial_cell_water_widget])
out = widgets.interactive_output(run_simulation, {'initial_2PG': initial_2PG_widget, 'initial_PEP': initial_PEP_widget, 'initial_cell_water': initial_cell_water_widget})

display(ui, out)
print(ui, out)
